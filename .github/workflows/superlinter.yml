# .github/workflows/deploy.yml
name: Build & Deploy to Render

on:
  push:
    branches:
      - main # Change this to 'master' if your default branch is master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub Actions
    
    # Permissions for this job:
    # 'contents: read' allows checkout of your repository code.
    # 'packages: write' is CRUCIAL for pushing images to GitHub Container Registry (ghcr.io).
    permissions:
      contents: read
      packages: write

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîë Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io # The registry for GitHub Container Registry
          username: ${{ github.actor }} # Uses your GitHub username
          password: ${{ secrets.GITHUB_TOKEN }} # Uses the automatically provided GITHUB_TOKEN

      - name: ‚öôÔ∏è Set up Docker Buildx
        # Docker Buildx provides enhanced build capabilities, like caching
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: . # Specifies that your Dockerfile is in the current directory (repository root)
          push: true # Tells the action to push the built image to the registry
          tags: | # Defines the tags for your image.
            ghcr.io/${{ github.repository }}:latest # latest tag
            ghcr.io/${{ github.repository }}:${{ github.sha }} # Tag with the commit SHA for unique versions
          cache-from: type=gha # Use GitHub Actions cache for faster subsequent builds
          cache-to: type=gha,mode=max # Store build cache in GitHub Actions cache

      - name: üöÄ Trigger Render Deploy Hook
        # This step sends a POST request to your Render Deploy Hook URL.
        # Render will then automatically pull the 'latest' image from GHCR and deploy it.
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }} # Access the secret you set up
        run: |
          # Basic check to ensure the secret is set, otherwise skip
          if [ -z "$RENDER_DEPLOY_HOOK_URL" ]; then
            echo "RENDER_DEPLOY_HOOK_URL secret not set. Skipping Render deploy trigger."
          else
            echo "Triggering Render deploy..."
            curl -X POST "$RENDER_DEPLOY_HOOK_URL"
            echo "Render deploy triggered successfully!"
          fi
